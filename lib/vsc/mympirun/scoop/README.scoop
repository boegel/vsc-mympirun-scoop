#
# Copyright 2012-2013 Ghent University
# Copyright 2012-2013 Stijn De Weirdt
#
# This file is part of VSC-tools,
# originally created by the HPC team of Ghent University (http://ugent.be/hpc/en),
# with support of Ghent University (http://ugent.be/hpc),
# the Flemish Supercomputer Centre (VSC) (https://vscentrum.be/nl/en),
# the Hercules foundation (http://www.herculesstichting.be/in_English)
# and the Department of Economy, Science and Innovation (EWI) (http://www.ewi-vlaanderen.be/en).
#
# http://github.com/hpcugent/VSC-tools
#
# VSC-tools is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation v2.
#
# VSC-tools is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with VSC-tools. If not, see <http://www.gnu.org/licenses/>.
#

usage: myscoop <executable> <args>
supported options: myscoop -U (and check the SCOOP section)

This directory contains the myscoop module and some SCOOP example wrapper modules
    myscoop : mympirun SCOOP support
    __main__ : SCOOP bootstrap

    workers:
        sanity: SCOOP sanity tester (e.g. myscoop --sched=local --scoop_module=sanity 1000)
        picalc : SCOOP piCalc demo (e.g. myscoop --sched=local --scoop_module=picalc 100 100 # arg1 = nr_batches, arg2 = batch_size )
        simple_shell : run command, return (ec,output); has SCOOP_COUNTER environment variable
            arg1 is checked for [start:]stop[:step] to determine number of runs
            known issue: lots of output can cause a hang (eg dmesg won't work)
            e.g. myscoop --sched=local 100:200 echo '\$SCOOP_COUNTER'


Run mpi jobs with scoop
 step 1. create jobscript, use mympirun --sched=local !
#!/bin/bash

module load ictce
mympirun --sched=local env |grep I_MPI_PIN_INFO

 step 2a. for external scripts: run it with scoop_freeorigin (and builtin scoop_module simple_shell (the default))
eg
myscoop --sched=local --hybrid=2 --scoop_freeorigin ./testmympirun.sh
this runs on 4 core node in 2 non-root workers with 2 cores each. output is
 [(0, 'I_MPI_PIN_INFO=2\nI_MPI_PIN_INFO=3\n'), (0, 'I_MPI_PIN_INFO=0\nI_MPI_PIN_INFO=1\n'),
 (0, 'I_MPI_PIN_INFO=2\nI_MPI_PIN_INFO=3\n'), (0, 'I_MPI_PIN_INFO=1\nI_MPI_PIN_INFO=0\n'),
 (0, 'I_MPI_PIN_INFO=2\nI_MPI_PIN_INFO=3\n'), (0, 'I_MPI_PIN_INFO=0\nI_MPI_PIN_INFO=1\n'),
 (0, 'I_MPI_PIN_INFO=3\nI_MPI_PIN_INFO=2\n'), (0, 'I_MPI_PIN_INFO=0\nI_MPI_PIN_INFO=1\n'),
 (0, 'I_MPI_PIN_INFO=2\nI_MPI_PIN_INFO=3\n'), (0, 'I_MPI_PIN_INFO=0\nI_MPI_PIN_INFO=1\n')]

step 2b. integration with self-written scoop modules that call script in step 1 for mpi calculations:
in the __main__, add
    from vsc.mympirun.scoop.worker_utils import fix_freeorigin
    fix_freeorigin()

  (This is harmless to add it to other code)
  myscoop --hybrid=2 --scoop_freeorigin /path/to/selfwritten/module
